name: CI - LHCI for PR URLs (supports localhost)

on: pull_request

jobs:
  lhci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max-old-space-size=8192
      GATSBY_CONCURRENT_DOWNLOAD: 1

    steps:
      - name: Extract URLs from PR body
        id: extract
        shell: bash
        run: |
          PR_BODY="${{ github.event.pull_request.body || '' }}"

          # Extract URLs into bash array safely, removing trailing punctuation except / or #
          mapfile -t URLS < <(echo "$PR_BODY" | grep -Eo 'https?://[^ )"\']+' | sed 's/[),.;:]*$//')

          if [ ${#URLS[@]} -eq 0 ]; then
            echo "No URLs found in PR body."
            echo "has_urls=false" >> $GITHUB_OUTPUT
            echo "has_localhost=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          ARGS=()
          CLEANED_LIST=""
          ANY_LOCALHOST=false

          for url in "${URLS[@]}"; do
            ARGS+=("--collect.url=$url")
            CLEANED_LIST+="$url\n"

            if [[ "$url" =~ https?://(localhost|127\.0\.0\.1)(:[0-9]+)? ]]; then
              ANY_LOCALHOST=true
            fi
          done

          # Join ARGS array into space-separated string for env var
          ARGS_STR="${ARGS[*]}"
          echo "ARGS=$ARGS_STR" >> $GITHUB_ENV

          # Set multiline output for collected URLs (for debug)
          echo -e "collected_urls<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CLEANED_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "has_urls=true" >> $GITHUB_OUTPUT
          if $ANY_LOCALHOST; then
            echo "has_localhost=true" >> $GITHUB_OUTPUT
          else
            echo "has_localhost=false" >> $GITHUB_OUTPUT
          fi

      - name: Show collected URLs (debug)
        if: steps.extract.outputs.has_urls == 'true'
        run: |
          echo "Collected URLs from PR body:"
          printf '%b\n' "${{ steps.extract.outputs.collected_urls || '' }}"

      - name: Checkout code (only if localhost URLs provided)
        if: steps.extract.outputs.has_localhost == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: npm install & build (only for localhost URLs)
        if: steps.extract.outputs.has_localhost == 'true'
        run: |
          npm ci
          npm run build

      - name: Start static server (only for localhost URLs)
        if: steps.extract.outputs.has_localhost == 'true'
        shell: bash
        run: |
          npx http-server ./public -p 9000 --silent &

          TIMEOUT=60
          START=0
          until curl -sSf http://localhost:9000/ >/dev/null; do
            sleep 1
            START=$((START+1))
            if [ $START -ge $TIMEOUT ]; then
              echo "Server did not start within ${TIMEOUT}s"
              exit 1
            fi
          done
          echo "Local server ready on http://localhost:9000/"

      - name: Run Lighthouse CI for supplied URLs
        if: steps.extract.outputs.has_urls == 'true'
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        shell: bash
        run: |
          npm install -g @lhci/cli@0.15.x

          if [ -z "${ARGS}" ]; then
            echo "No URLs provided, skipping Lighthouse run."
            exit 0
          fi

          echo "Running: lhci autorun ${ARGS}"
          # Run LHCI with all --collect.url arguments expanded
          lhci autorun ${ARGS}
